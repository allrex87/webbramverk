# coding: utf-8
class User < ActiveRecord::Base
  has_and_belongs_to_many :projects
  has_many :projects
  has_many :tickets
  
  before_save :create_hashed_password
  after_save :clear_password
  
  has_secure_password
  
  attr_accessible :first_name, :last_name, :email, :password, :password_confirmation
  
  validates :first_name,
    :presences => {:message => 'Du måste ange ett förnamn'},
    :lenght => {:minimum => 1, :maximum => 40, :message => 'Förnamnet måste vara 1-40 tecken'}
   
  validates :last_name,
    :presences => { :message => 'Du måste ange ett efternamn'},
    :lenght => {:minimum => 1, :maximum => 40, :message => "Förnamnet måste vara 1-40 tecken"}
   
  validates :email,
    :presences => { :message => 'Du måste ange en emailadress'},
    :email => true
  
  validates :password,
    :presences => { :message => 'Du måste ange ett lösenord'},
    :confirmation => true
  
  validates :password_confirmation,
    :presences => { :message => 'Du måste upprepa lösenordet'}
  
  def create_hashed_password
    unless password_blank?
      #skapa och updatera user objektet
      #använd seld endast vid assignment (salt, hashed_password är fält i databasen)
      self.salt = User.make_salt(:email) if salt.blank?
      self.hashed_password = User.hash_password_with_salt(:password, salt)
    end
  end
  
  def self.authenticate(email_to_try = '', password_to_try = '' )
    user = User.where('email = ?', email_to_try).first
    if user && user.password_match?(password_to_try)
      return user
    else
      return false
    end
  end
  
  def password_match?(password_to_check = '')
    password = User.hashed_password_salted(password_to_check, salt)
  end
  
end
